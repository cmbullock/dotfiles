set nocompatible

filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#rc()

Bundle 'gmarik/Vundle.vim'
Bundle 'bling/vim-airline'
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'altercation/vim-colors-solarized'
Bundle 'cakebaker/scss-syntax.vim'

set cm=blowfish
set modeline
set modelines=3
set tabstop=2 
set shiftwidth=2
set smartindent
set report=5
set history=500
set hidden
set wildmenu
set wildmode=list:longest
set title
set scrolloff=3
set backupdir=~/.vimtmp//,~/.tmp//,/var/tmp//,/tmp//
set directory=~/.vimtmp//,~/.tmp//,/var/tmp//,/tmp//
set ruler
set cmdheight=2
set backspace=indent,eol,start
set shortmess=atI
set number
set diffopt+=iwhite
"set clipboard=unnamed
set autoread
set showmatch
set list
"set listchars=tab:▸\ ,eol:¬,trail:▫,extends:#,nbsp:▫
set listchars=tab:\ \ ,eol:¬,trail:▫,extends:#,nbsp:▫
set expandtab
set mouse=a
set tw=0
set statusline=%F%m%h%w\ %y\ %=\ %l/%L,\ %-3c\ %6p%%\ 

filetype on
filetype plugin on
filetype indent on

imap jk <ESC>
map K :<BS>
map Y y$
map <Leader>k <C-W>k
map <Leader>j <C-W>j
map <Leader>h <C-W>h
map <Leader>l <C-W>l
map <Leader>n :new<CR>
map <Leader>v :vnew<CR>
map <Leader>< <C-W><
map <Leader>> <C-W>>

map <Leader>g :diffget
map <Leader>G :diffget<CR>
map <Leader>p :diffput
map <Leader>P :diffput<CR>
map <Leader>u :diffupdate<CR>

map <Leader>r :call RunSpecFile()<CR>
map <F5> :call RunLastSpec()<CR>

map <F7> :vertical wincmd f<CR>

inoremap <C-@> <C-N>
nnoremap ' `
nnoremap ` '
nnoremap U 
" Shift buffer viewport by 3 lines instead of 1
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

map <Leader>= yyp<Esc>:s/./=/g<CR>yykP

com! Cfg :source ~/.vimrc
com! -nargs=0 EditRC :topleft vs ~/.vim/vimrc
cabbrev rc EditRC

" Filetype-specific options
au FileType ruby setlocal shiftwidth=2 tabstop=2 expandtab
au FileType python setlocal shiftwidth=4 tabstop=4 expandtab
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru} setlocal filetype=ruby

" Clojure syntax config
let g:clojure_fuzzy_indent = 1
let g:clojure_fuzzy_indent_patterns = [ '^with', '^def', '^let', '^fact' ]

let g:is_posix = 1

let NERDTreeWinSize=50
let NERDTreeShowHidden=1
let NERDTreeStatusLine=-1
com! NERDTreeSuperToggle :if(exists('b:NERDTreeType')) | NERDTreeToggle | else | NERDTreeFocus | endif
map <Leader>t :NERDTreeSuperToggle<CR>
" Close if only nerdtree is left open
au BufEnter * if(winnr('$') == 1 && exists('b:NERDTreeType') && b:NERDTreeType == 'primary') | q | endif
" Add git branch to NERDTree status line
function! CWD()
	return substitute(getcwd(), $HOME, '~', '')
endfunction
au FileType nerdtree setl statusline=%<%{CWD()}\ %=%{fugitive#statusline()}\ 
au VimEnter * if(argc() == 0 && isdirectory(getcwd() . '/.git')) | NERDTree | endif

if executable('ag')
  set grepprg=ag\ --nogroup\ --column\ --ignore=log\ --ignore=vendor
	let g:grepprg = "ag --nogroup --column --ignore='^(log|vendor)'"
	let g:findprg = "ag --nogroup --column --ignore='^(log|vendor)'"
	let g:ctrlp_user_command = {
		\ 'types': {
			\ 1: ['.git', 'cd %s && git ls-files . --cached --others --exclude-standard'],
			\ 2: ['.hg', 'hg --cwd %s status -numac -I . $(hg root)'],
		\ },
		\ 'fallback': 'ag %s --files-with-matches --nocolor -g ""'
	\ }
endif

" Session handling
au VimLeave * if(exists(':NERDTreeClose')) | NERDTreeClose | endif
au VimLeave * mksession! .vimsession
au VimEnter * if(filereadable('.vimsession') && argc() == 0) | source .vimsession | endif

colorscheme distinguished
hi StatusLineNC ctermbg=233
hi LineNr ctermbg=233
hi Comment ctermbg=0

syn on

